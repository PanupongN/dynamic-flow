# Partner CI/CD Template
# Copy this file to your repository and customize as needed

name: Partner Dynamic Flow Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # Customize these variables for your environment
  NODE_VERSION: '18'
  PARTNER_NAME: 'your-company-name'
  DEPLOYMENT_ENVIRONMENT: 'production' # or 'staging'
  
  # White-label configuration
  BRAND_PRIMARY_COLOR: '#your-primary-color'
  BRAND_SECONDARY_COLOR: '#your-secondary-color'
  BRAND_LOGO_URL: 'https://your-domain.com/logo.png'
  CUSTOM_DOMAIN: 'forms.your-domain.com'

jobs:
  # Quality checks - same for all partners
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'your-org/dynamic-flow'
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm run test

  # Build with partner customizations
  build-customized:
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'your-org/dynamic-flow'
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Apply partner branding
        run: |
          # Create partner-specific environment file
          cat > apps/builder/.env.production << EOF
          VITE_PARTNER_NAME=${{ env.PARTNER_NAME }}
          VITE_BRAND_PRIMARY_COLOR=${{ env.BRAND_PRIMARY_COLOR }}
          VITE_BRAND_SECONDARY_COLOR=${{ env.BRAND_SECONDARY_COLOR }}
          VITE_BRAND_LOGO_URL=${{ env.BRAND_LOGO_URL }}
          VITE_CUSTOM_DOMAIN=${{ env.CUSTOM_DOMAIN }}
          VITE_WHITE_LABEL_MODE=true
          EOF
      
      - name: Build applications
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: partner-build-${{ env.PARTNER_NAME }}
          path: |
            apps/*/dist

  # Deploy to partner infrastructure
  deploy:
    runs-on: ubuntu-latest
    needs: build-customized
    if: github.ref == 'refs/heads/main'
    environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: partner-build-${{ env.PARTNER_NAME }}
      
      # Option 1: Deploy to AWS S3 + CloudFront
      - name: Deploy to AWS (S3 + CloudFront)
        if: ${{ vars.DEPLOY_TARGET == 'aws' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
        run: |
          aws s3 sync apps/builder/dist s3://${{ vars.S3_BUCKET_NAME }}/builder
          aws s3 sync apps/embed/dist s3://${{ vars.S3_BUCKET_NAME }}/embed
          aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
      
      # Option 2: Deploy to Azure Static Web Apps
      - name: Deploy to Azure
        if: ${{ vars.DEPLOY_TARGET == 'azure' }}
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "apps/builder/dist"
          api_location: ""
          output_location: ""
      
      # Option 3: Deploy to Vercel
      - name: Deploy to Vercel
        if: ${{ vars.DEPLOY_TARGET == 'vercel' }}
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: apps/builder/dist
      
      # Option 4: Deploy to Docker/Kubernetes
      - name: Deploy to Kubernetes
        if: ${{ vars.DEPLOY_TARGET == 'kubernetes' }}
        run: |
          echo "Deploying to Kubernetes cluster"
          # Add kubectl commands or Helm charts here
          kubectl apply -f k8s/partner-configs/${{ env.PARTNER_NAME }}/
      
      # Option 5: Deploy to partner's custom infrastructure
      - name: Deploy to custom infrastructure
        if: ${{ vars.DEPLOY_TARGET == 'custom' }}
        run: |
          # Add partner-specific deployment commands here
          echo "Deploying with custom script"
          chmod +x deploy/partner-deploy.sh
          ./deploy/partner-deploy.sh

  # Health checks and notifications
  post-deploy:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Health check
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Check if the application is responding
          curl -f https://${{ env.CUSTOM_DOMAIN }}/health || exit 1
      
      - name: Notify team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
